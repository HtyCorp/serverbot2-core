version: 0.2

env:
  shell: bash
  variables:
    CDK_VERSION: "1.111.0"
    GRAAL_RELEASE: "vm-21.2.0"
    GRAAL_ARTIFACT: "graalvm-ce-java11-linux-amd64-21.2.0"
    JAVA_HOME: "/usr/local/lib/graalvm/vm-21.2.0"

phases:
  install:
    commands:
      # Install NPM to 'global' local repo
      - "npm install -g aws-cdk@${CDK_VERSION}"
      # Download Graal only if not already installed (cached by version/GRAAL_RELEASE)
      - |
        if [[ -d "${JAVA_HOME}" ]]; then
          echo "GraalVM ${GRAAL_ARTIFACT} already installed"
        else
          mkdir -p "${JAVA_HOME}"
          GRAAL_DOWNLOAD="https://github.com/graalvm/graalvm-ce-builds/releases/download"
          curl -Lo graal.tar.gz "${GRAAL_DOWNLOAD}/${GRAAL_RELEASE}/${GRAAL_ARTIFACT}.tar.gz"
          tar -xzf graal.tar.gz -C "${JAVA_HOME}" --strip 1 # Remove 'container' dir inside tarball
          ${JAVA_HOME}/bin/java -version
          ${JAVA_HOME}/bin/gu -v install native-image
        fi
  build:
    commands:
      # Add Java bin dir to path (not strictly required by mvn but handy for any other tools)
      - "export PATH=\"${JAVA_HOME}/bin:${PATH}\""
      # Compile Java modules
      - "mvn clean install -Dmaven.test.skip=true"
      # Prep python dependencies (CDK will zip up the asset automatically)
      - "(cd web/url-shortener-frontend/edge-function && pip3 install -t . -r requirements.txt)"
      # Synthesize application/service CDK stacks for application deployment
      - "mkdir -p gen/cloud-assembly"
      - "(cd deployment/application-infrastructure/ && cdk synth -o ../../gen/cloud-assembly)"
      - "echo \"Generated $(cat gen/cloud-assembly/*.template.json | wc -l) template lines\""
  post_build:
    commands:
      - "echo \"Build completed at $(date)\""
artifacts:
  name: "cloud_assembly"
  base-directory: "gen/cloud-assembly"
  discard-paths: no
  files:
    - "**/*"
cache:
  paths:
    - '/root/.m2/**/*'
    - '/usr/local/lib/node_modules/aws-cdk/**/*'
    - '/usr/local/lib/graalvm/**/*'
